package com.mycompany.factorymethod;

/**
 * Фабричный метод - определяет интерфейс создания обьекта, но позволяет субклассам 
 * выбрать класс создаваемого экземпляра. Таким образом, Фабричный метод делегирует
 * операцию создания экземпляра субклассам. 
 * 
 * Сокр. Фабричный метод определяет интерфейс создания обьекта, но позволяет 
 * субклассам выбрать создаваемый экземпляр.
 * 
 * Задача Фабричного метода - перемещение создания экземпляторов в субклассы.
 * Фабричный метод основан на наследовании: создание обьектов делегируется субклассам, 
 * реализующим фабричный метод для создания обьектов.
 * 
 * Паттерн обеспечивает повторное использование кода и расширяемость без изменений в клиентском коде. 
 * Например, для добавления нового продукта, нужно создать новый класс, реализуюший фабричный метод, в котором  
 * выбрать тип создаваемого продукта. Таким образом существующий код с реализациями других продуктов не будет подвержен 
 * изменениям.
 * 
 * @author Vladimir
 */
public class Main {
    public static void main(String... args) {
        // Создаем конфигуратор продукта A
        AbstractProductConfigurer productAConfigurer = new ProductAConfigurer();
        // Получим ссылку на продукт A. 
        // В методе configure() используется фабричный метод createProduct() для создания продукта. 
        Product productA = productAConfigurer.configure();
        // Выводим в консоль данные продукта А
        System.out.println(productA);
        // Создаем конфигуратор продукта B
        AbstractProductConfigurer productBConfigurer = new ProductBConfigurer();
        // Получим ссылку на продукт B. 
        Product productB = productBConfigurer.configure();
        // Выводим в консоль данные продукта B
        System.out.println(productB);
    }
}
